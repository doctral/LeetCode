public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length==0) return false;
        if(board[0].length==0) return false;
        int row=board.length, col=board[0].length;
        boolean[][] used=new boolean[row][col];
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(backtrack(board, used, i, j, word, 0)){
                    return true;
                } 
            }
        }
        return false;
    }
    boolean backtrack(char[][] board, boolean[][] used, int row, int col, String word, int currIndex){
        if(word.length()==currIndex) return true;
        if(row<0 || col<0 || row>=board.length || col>=board[0].length) return false;
        char ch=word.charAt(currIndex);
        if(!used[row][col] && ch==board[row][col]){
            used[row][col]=true;
            boolean res=backtrack(board, used, row+1, col, word, currIndex+1) || backtrack(board, used, row-1, col, word, currIndex+1)
            || backtrack(board, used, row, col-1, word, currIndex+1) ||backtrack(board, used, row, col+1, word, currIndex+1);
            used[row][col]=false;
            return res;
        }
        return false;
    }
}
