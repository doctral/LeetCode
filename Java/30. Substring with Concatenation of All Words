public class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res=new LinkedList<>();
        if(words.length<1 || words[0].length()<1 ||s.length()<words.length*words[0].length()) return res;
        int len=words.length*words[0].length();
        int word_len=words[0].length();
        HashMap<String, Integer> map=new HashMap<>();
        for(String str:words){
            map.put(str,map.getOrDefault(str,0)+1);
        }
        for(int i=0; i<=s.length()-len; i++){
            if(map.containsKey(s.substring(i, i+word_len))){
                HashMap<String, Integer> curr=new HashMap<>();
                curr.put(s.substring(i,i+word_len),1);
                boolean good=true;
                for(int j=i+word_len; j<i+len; j+=word_len){
                    String sss=s.substring(j,j+word_len);
                    if(!map.containsKey(sss) || map.get(sss)<=curr.getOrDefault(sss,0)){
                        good=false;
                        break;
                    }
                    curr.put(sss, curr.getOrDefault(sss,0)+1);
                }
                if(good) res.add(i);
            }
        }
        return res;
    }
}
