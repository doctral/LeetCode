public class Solution {
    int[] queens;
    
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        queens=new int[n];
        for(int i=0; i<n; i++){
            queens[i]=-1;
        }
        dfs(res,new ArrayList<String>(), 0, n);
        return res;
    }
    private void dfs(List<List<String>> res, List<String> list, int row, int n){
        if (row == n){
            res.add(new ArrayList<String>(list));
            return;
        }
        for (int i = 0; i < n; i++){
            if(!valid(i, row)) continue;
            
            char[] charArray = new char[n];
            Arrays.fill(charArray, '.');
            charArray[i] = 'Q';
            String rowString = new String(charArray);
            
            list.add(rowString);
            queens[row]=i;
            dfs(res, list, row + 1, n);
            list.remove(list.size() - 1);
            queens[row]=-1;
        }
    }
    private boolean valid(int col, int row){
        for(int i=1; i<=row; i++){
            if(queens[row-i]==col || queens[row-i]==col+i || queens[row-i]==col-i) return false;
        }
        return true;
    }
}
