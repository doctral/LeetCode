public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> res=new ArrayList<>();
        if(intervals.size()<1){
            return res;
        }
        
        boolean finished=false;
        
        while(!finished){
            finished=true;
            // if an interval is used, then skip it
            boolean[] used=new boolean[intervals.size()];
            // results for each while loop
            res=new ArrayList<>();
            
            for(int i=0; i<intervals.size(); i++){
                if(used[i]==false){
                
                    used[i]=true;
                    int start=intervals.get(i).start;
                    int end=intervals.get(i).end;
                    for(int j=i+1; j<intervals.size(); j++){
                         if(used[j]==false && ( (end>=intervals.get(j).start && start<=intervals.get(j).end) || (start>=intervals.get(j).start && end<=intervals.get(j).end) ||(start<=intervals.get(j).start && end>=intervals.get(j).end)) ){
                         
                         finished=false;  // if merge happened, then we need check the whole list again
                         used[j]=true;    // mark all used intervals
                         // find the interval with the max length
                         start=Math.min(start, intervals.get(j).start);
                         end=Math.max(end,intervals.get(j).end);
                         }
                    }
                    
                res.add(new Interval(start,end));
                }
            }
        
           if(!finished){
                intervals=new ArrayList<>(res);
           }
            
        }

        return res;
        
    }
}
