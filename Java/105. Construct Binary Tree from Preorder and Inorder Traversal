/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private TreeNode root;
    private int[] indices;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> map=new HashMap<>();
        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }
        indices=new int[preorder.length];
        for(int i=0; i<preorder.length; i++){
            indices[i]=map.get(preorder[i]);
        }
        for(int index: indices){
            insert(index);
        }
        settle(root, inorder);
        return root;
    }
    private void insert(int index){
        if(root==null){
            root=new TreeNode(index);
        }
        else{
            insert(root, index);
        }
    }
    private void insert(TreeNode root, int val){
        if(val<root.val){
            if(root.left==null){
                root.left=new TreeNode(val);
            }
            else{
                insert(root.left, val);
            }
        }
        else{
            if(root.right==null){
                root.right=new TreeNode(val);
            }
            else{
                insert(root.right, val);
            }
        }
    }
    private void settle(TreeNode root, int[] inorder){
        if(root!=null){
            root.val=inorder[root.val];
            settle(root.left, inorder);
            settle(root.right, inorder);
        }
    }
}
