public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        boolean[] used=new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(res, new ArrayList<Integer>(), used, nums);
        return res;
    }
    void backtrack(List<List<Integer>> res, List<Integer> temp, boolean[] used, int[] nums){
        if(temp.size()==nums.length) res.add(new ArrayList<>(temp));
        else{
            for(int i=0; i<nums.length; i++){
                if(used[i]) continue;
                if(i>0 && nums[i]==nums[i-1] && !used[i-1]) continue;
                temp.add(nums[i]);
                used[i]=true;
                backtrack(res,temp,used, nums);
                temp.remove(temp.size()-1);
                used[i]=false;
            }
        }
    }
}
