Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".

Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.

Credits:
Special thanks to @dietpepsi for adding this problem and creating all test cases.
#########################################################################################################

class Solution {
    public int maxProduct(String[] words) {
        int[] chs=new int[words.length];   // each integer has 32 bit, while all lower case character only has 26, therefore, each int can be used 
                                           // record how many different characters each string has.     
        for(int i=0; i<words.length; i++){
            for(char ch: words[i].toCharArray()){
                chs[i]=(chs[i] | (1<<(ch-'a')) );     // record the different characters
            }
        }
        int res=0;
        for(int i=0; i<words.length; i++){
            for(int j=i+1; j<words.length; j++){
                // if two string doesn't share any common characters
                if( (chs[i]&chs[j])==0 && words[i].length()*words[j].length()>res ) res=words[i].length()*words[j].length();
            }
        }
        return res;
    }
}