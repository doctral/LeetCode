Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all 
the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices 
of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note: 
(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100

Example:

Given [3, 1, 5, 8]

Return 167

    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
#####################################################################################################
The key point of solving this problem is, given an range of i,j of an array, if we select index k as 
the last burst element, where i<=k<=j, then res[i][j]=max(res[i][j], arr[i-1]*arr[k]*arr[j+1]+res[i][k-1]+res[k+1][j]);
Based on this key idea, we can solve this problem by using either recursion or DP.
Approach 1: Recursion (12 ms)
class Solution {
    public int maxCoins(int[] nums) {
        int[] arr=new int[nums.length+2];
        arr[0]=1;
        int index=1;
        int[][] res=new int[arr.length][arr.length];
        for(int i=0; i<nums.length; i++){
            if(nums[i]>0) arr[index++]=nums[i];
        }
        arr[index]=1;
        return dp(res, arr, 1, index-1);
    }
    private int dp(int[][] res, int[] arr, int i, int j){
        if(res[i][j]>0) return res[i][j];
        for(int k=i; k<=j; k++){
            res[i][j]=Math.max(res[i][j], arr[i-1]*arr[k]*arr[j+1]+dp(res, arr, i, k-1)+dp(res, arr, k+1, j));
        }
        return res[i][j];
    }
}
Approach 2: DP (20 ms)
class Solution {
    public int maxCoins(int[] nums) {
        if(nums.length<1) return 0;
        int[] arr=new int[nums.length];
        int index=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]>0) arr[index++]=nums[i];
        }
        int[][] res=new int[index][index];
        for(int len=1; len<=index; len++){
            for(int i=0; i<=index-len; i++){
                int j=i+len-1;
                for(int k=i; k<=j; k++){
                    int end=arr[k]*get(arr,i-1, index)*get(arr, j+1, index);   // the last burst element
                    end+=(k==i)?0:res[i][k-1];     // left part
                    end+=(k==j)?0:res[k+1][j];     // right part
                    if(end>res[i][j]) res[i][j]=end;
                }
            }
        }
        return res[0][index-1];
    }
    private int get(int[] arr, int index, int len){
        if(index<0 || index>=len) return 1;
        return arr[index];
    }
}
