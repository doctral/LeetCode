Merge k sorted linked lists and return it as one sorted list. Analyze and 
describe its complexity.

##########################################################################
A hint to solve this problem is, merging two sorted list forms a sorted list. 
Therefore, we can do this in log(k) using divide and conquer approach.
The code is as following:

public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length<1) return null;
        return merge(lists, 0, lists.length-1);
    }
    private ListNode merge(ListNode[] lists, int left, int right){
        if(left<right){
            int mid=(left+right)/2;
            return mergeTwoLists(merge(lists, left, mid), merge(lists, mid+1, right));
        }
        else{
            return lists[left];
        }
        
    }
    private ListNode mergeTwoLists(ListNode l1, ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        if(l1.val<l2.val){
            l1.next=mergeTwoLists(l1.next, l2);
            return l1;
        }
        else{
            l2.next=mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
    
}