Given a digit string, return all possible letter combinations that the number 
could represent.

A mapping of digit to letters (just like on the telephone buttons) is given 
below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in 
any order you want.

###############################################################################
This combination problem can be solved by using DFS. We recursively call the method 
in a for loop.

public class Solution {
    private String[] letters={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        List<String> res=new LinkedList<>();
        if(digits.length()<1) return res;
        parser(res, "", digits, 0);
        return res;
    }
    private void parser(List<String> res, String str, String digits, int index){
        if(index>=digits.length()){
            res.add(str);
        }
        else{
            String lett=letters[digits.charAt(index)-'0'];
            for(int i=0; i<lett.length(); i++){
                parser(res, str+lett.substring(i,i+1), digits, index+1);
            }
        }
    }
}
