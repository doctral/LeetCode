Given a linked list, reverse the nodes of a linked list k at a time and return 
its modified list.

k is a positive integer and is less than or equal to the length of the linked 
list. If the number of nodes is not a multiple of k then left-out nodes in the 
end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5
#############################################################################
The code is as following:
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null || head.next==null || k<2) return head;
        ListNode fake=new ListNode(0);
        ListNode pre=fake, tail=fake;
        ListNode temp;
        pre.next=head;
        int num;
        while(true){
            head=pre.next;
            num=k;
            while(num>0 && tail!=null){
                tail=tail.next;
                num--;
            }
            if(tail==null) break;
            while(pre.next!=tail){
                temp=pre.next;
                pre.next=temp.next;
                temp.next=tail.next;
                tail.next=temp;
            }
            pre=head;
            tail=head;
        }
        return fake.next;
    }
}