Given n non-negative integers a1, a2, ..., an, where each represents a point at
coordinate (i, ai). n vertical lines are drawn such that the two endpoints of 
line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis 
forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

#############################################################################
This problem can be solved by O(n). We start from low=0, high=height.length-1;
each time we compare the height of two positions. For example, if height[low]<
height[high], that means we can keep updating index low until we can a position 
with height>height[low].
The code is as following:

public class Solution {
    public int maxArea(int[] height) {
        int low=0, high=height.length-1, max=-1;
        while(low<high){
            int left=height[low], right=height[high];
            max=Math.max(max, (high-low)*Math.min(left,right));
            if(left<right){
                while(low<high && height[low]<=left){   // until greater than its previous height
                    low++;
                }
            }
            else{
                while(low<high && height[high]<=right){
                    high--;
                }
            }
        }
        return max;
    }
} 