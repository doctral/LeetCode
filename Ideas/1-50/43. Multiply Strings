Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
##############################################################################################

The idea to solve this problem is very interesting.
1. Notice that, given num1 and num2, the length of their product would be maximum num1.length + 
num2.length. Why? Assume num1=999, num2=9999, the maximum product would less than 1000*9999=9999000, 
which is the length of num1+num2. Therefore, we can create an array to store the product of num1 and num2.
2. for product of nums at index i and index j, we use i+j+1 to store its unit digit, and i+j to store 
the possible tens digit. 
The code is as following:

public class Solution {
    public String multiply(String num1, String num2) {
        if(num1.length()<1 || num2.length()<1) return "";
        if(num1.equals("0") || num2.equals("0")) return "0";
        int[] res=new int[num1.length()+num2.length()];
        for(int i=num1.length()-1; i>=0; i--){
            for(int j=num2.length()-1; j>=0; j--){
                int id_1st=i+j+1, id_10th=i+j;
                int pro=(num1.charAt(i)-'0')*(num2.charAt(j)-'0')+res[id_1st];
                res[id_1st]=pro%10;
                res[id_10th]+=pro/10;
            }
        }
        StringBuilder sb=new StringBuilder();
        for(int n:res){
            if(n!=0 || sb.length()>0) sb.append(n);
        }
        return sb.toString();
    }
}