Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ? false
isMatch("aa","aa") ? true
isMatch("aaa","aa") ? false
isMatch("aa", "a*") ? true
isMatch("aa", ".*") ? true
isMatch("ab", ".*") ? true
isMatch("aab", "c*a*b") ? true

#############################################################################
At first, handle the edge case: when p is empty, then s should be empty. (
reverse is not correct).

There are two major cases: end with * or not.
Case 1:p ends with *, then p at least has length 2. In this case, we need to 
compare the last character in both s and p, if match, then there are two 
possibilities:remove (x* or .*) in p's tail or remove the last char from s's 
tail, either one is OK; if not match, simply remove the last two chars in p.

Case 2: not ends with '*'. This is the simple case, just compare the last digit 
of each string, if match then move on, otherwise return false;

The code is as following:

public class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length()<1) return s.length()<1;
        int m=s.length(), n=p.length();
        if(p.charAt(n-1)=='*'){
            if(m>0 && (s.charAt(m-1)==p.charAt(n-2) || p.charAt(n-2)=='.')){
                return isMatch(s.substring(0,m-1), p) || isMatch(s, p.substring(0,n-2));
            }
            else{
                return isMatch(s,p.substring(0,n-2));
            } 
        }
        else {
            if(m>0 && (s.charAt(m-1)==p.charAt(n-1) || p.charAt(n-1)=='.')){
                return isMatch(s.substring(0,m-1), p.substring(0,n-1));
            }
            else{
                return false;
            }
        }
    }
}

###########################################################################################
For large cases, the recursive method could be very expensive. And this problem can also be solved
using DP. The code is as following: (beat 88%)

public class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length()<1) return s.length()<1;
        int m=s.length(), n=p.length();
        boolean[][] res=new boolean[m+1][n+1];  // res[m][n] is the result of last comparison
        res[0][0]=true;   // if both empty, then true
        for(int i=0; i<n;i++){
            if(p.charAt(i)=='*' && res[0][i-1]){
                res[0][i+1]=true;               // if s="", p=a*b*c*d*e*f*g*, still true
            }
        }
        for(int i=0; i<m; i++){  // similar as first method
            for(int j=0; j<n; j++){
                char ss=s.charAt(i);
                char pp=p.charAt(j);
                if(pp==ss || pp=='.'){
                    res[i+1][j+1]=res[i][j];       res[i+1][j+1] indicates comparison at i, j
                }
                else if(pp=='*'){
                    if(p.charAt(j-1)==ss || p.charAt(j-1)=='.'){
                        res[i+1][j+1]=res[i][j+1] || res[i+1][j-1];
                    }
                    else{
                        res[i+1][j+1]=res[i+1][j-1];
                    }
                } 
            }
        }
        return res[m][n];
    }
}


#########################################################################################
Q2: Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ? false
isMatch("aa","aa") ? true
isMatch("aaa","aa") ? false
isMatch("aa", "*") ? true
isMatch("aa", "a*") ? true
isMatch("ab", "?*") ? true
isMatch("aab", "c*a*b") ? false
##########################################################################################
This question is similar to above question, the key points are:
1. '?' is the same as '.' above
2. '*' can be any sequence including empty, while the first question is a match of preceding
element. This difference determines that: res[i][j]=res[i-1][j] || res[i][j-1]
Based on this idea, we have the DP solution for this problem asg following:

public class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length()<1) return s.length()<1;
        int m=s.length(), n=p.length();
        boolean[][] res=new boolean[m+1][n+1];
        res[0][0]=true;
        for(int i=0; i<n; i++){
            if(p.charAt(i)=='*' && res[0][i]){
                res[0][i+1]=res[0][i];      // s="", p="***************"
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                char ss=s.charAt(i), pp=p.charAt(j);
                if(ss==pp || pp=='?'){
                    res[i+1][j+1]=res[i][j];
                }
                else if(pp=='*'){
                    res[i+1][j+1]=res[i+1][j] || res[i][j+1];
                }
            }
        }
        return res[m][n];
    }
}
