Given a linked list, remove the nth node from the end of list and return its 
head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 
   1->2->3->5.
###############################################################################
since the head is possible to be changed, we'd better to create a fake headnode 
at first, and then we create two pointers, one is pre for the previous node of 
the target node, and the other is fast. 

the code is as following:
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode node=new ListNode(0);
        ListNode pre=node, fast=node;
        pre.next=head;
        while(n>0){
            fast=fast.next;
            n--;
        }
        while(fast.next!=null){
            fast=fast.next;
            pre=pre.next;
        }
        pre.next=pre.next.next;
        return node.next;
    }
}