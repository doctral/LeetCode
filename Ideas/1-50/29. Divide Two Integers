Divide two integers without using multiplication, division and mod operator.
If it is overflow, return MAX_INT.

############################################################################
There are cases that can lead to overflow: divisor=0 or 
dividend=Integer.MIN_VALUE && divisor=-1.
In case of dividend=Integer.MIN_VALUE,we need to cast both dividend and divisor' 
absolute value to long type. 
To solve this problem efficiently, we can use bit operation: 
the key point is here: divisor<<n equals to divisor*2^n. 
Therefore, at each iteration, we can find the right n, and then add 2^n as the 
result, and update the dividend by abstract divisor<<n.

The code is as following:

public class Solution {
    public int divide(int dividend, int divisor) {
        if(divisor==0 || (divisor==-1 && dividend==Integer.MIN_VALUE)) return Integer.MAX_VALUE;
        long dd=Math.abs((long)dividend);
        long d=Math.abs((long)divisor);
        int res=0;
        while(dd>=d){
            int shift=0;
            while(dd>=(d<<shift)){
                shift++;
            }
            res+=1<<(shift-1);
            dd-=d<<(shift-1);
        }
        if(dividend>0 && divisor<0 || dividend<0 && divisor>0) return -1*res;
        return res;
    }
}