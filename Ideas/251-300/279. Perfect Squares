Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

###################################################################################################
class Solution {
    static Set<Integer> set=new HashSet<>();
    public int numSquares(int n) {
        if(isSquare(n)) return 1;
        while(n%4==0) n=n>>>2;
        if((n%8)==7) return 4;
        for(int i=1; i<=n/i; i++){
            if(isSquare(n-i*i)) return 2;
        }
        return 3;
    }
    private boolean isSquare(int num){
        if(set.contains(num)) return true;
        int ss=(int)Math.sqrt(num);
        if(ss*ss==num){
            set.add(num);
            return true;
        }
        return false;
    }
}