Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

######################################################################################################
Approach 1: Pre-order traversal (faster)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb=new StringBuilder();
        preorder(sb, root);
        return sb.toString();
    }
    private void preorder(StringBuilder sb, TreeNode root){
        if(root==null){
            sb.append("# ");
        }
        else{
            sb.append(root.val+" ");
            preorder(sb, root.left);
            preorder(sb, root.right);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<String> strs=new LinkedList<>();
        for(String str: data.split(" ")){
            if(strs.add(str));
        }
        return rebuild(strs);
    }
    private TreeNode rebuild(Queue<String> strs){
        if(strs.size()==0) return null;
        String str=strs.remove();
        if(str.equals("#")) return null;
        TreeNode root=new TreeNode(Integer.parseInt(str));
        root.left=rebuild(strs);
        root.right=rebuild(strs);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

#######################################################################################33
Approach 2: BFS 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "";
        StringBuilder sb=new StringBuilder();
        Queue<TreeNode> curr=new LinkedList<>();
        curr.add(root);
        while(curr.size()>0){
            TreeNode node=curr.remove();
            if(node==null){
                sb.append("# ");
            }
            else{
                sb.append(node.val+" ");
                curr.add(node.left);
                curr.add(node.right);
            }
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length()<1) return null;
        String[] strs=data.split(" ");
        TreeNode root=new TreeNode(Integer.parseInt(strs[0]));
        Queue<TreeNode> curr=new LinkedList<>();
        curr.add(root);
        int index=1;
        while(curr.size()>0){
            TreeNode node=curr.remove();
            if(!strs[index].equals("#")){
                TreeNode left=new TreeNode(Integer.parseInt(strs[index]));
                node.left=left;
                curr.add(left);
            }
            index++;
            if(!strs[index].equals("#")){
                TreeNode right=new TreeNode(Integer.parseInt(strs[index]));
                node.right=right;
                curr.add(right);
            }
            index++;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));