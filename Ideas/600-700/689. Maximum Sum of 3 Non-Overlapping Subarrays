In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
Note:
nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).

#############################################################################################################
class Solution {
    //The question asks for three non-overlapping intervals with maximum sum of all 3 intervals. 
    //If the middle interval is [i, i+k-1], where k <= i <= n-2k, the left interval has to be in subrange [0, i-1], 
    //and the right interval is from subrange [i+k, n-1].
    //So the following solution is based on DP.

    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n=nums.length;
        // get sum, sums[i] means sum of number from 0 to i-1
        int[] sums=new int[n+1];
        for(int i=0; i<n; i++){
            sums[i+1]=sums[i]+nums[i];
        }
        // from left to right to get the index with max sum with size k
        int[] left=new int[n];
        int max=0;
        for(int i=0; i<=n-k; i++){
            if(sums[i+k]-sums[i]>max){
                max=sums[i+k]-sums[i];
                left[i]=i;
            }
            else{
                left[i]=left[i-1];
            }
        }
        // from right to left to get the index with max sum with size k
        int[] right=new int[n];
        max=0;
        for(int i=n-k; i>=0; i--){
            if(sums[i+k]-sums[i]>max){
                max=sums[i+k]-sums[i];
                right[i]=i;
            }
            else {
                right[i]=right[i+1];
            }
        }
        // now from the mid interval to get the max sum based on the left and right index
        // mid interval starts from k to n-2k inclusive
        max=0;
        int[] res=new int[3];
        for(int i=k; i<=n-2*k; i++){
            int idx_left=left[i-k];
            int idx_right=right[k+i];
            int sum_left=sums[idx_left+k]-sums[idx_left];
            int sum_mid=sums[i+k]-sums[i];
            int sum_right=sums[idx_right+k]-sums[idx_right];
            if(max<sum_left+sum_mid+sum_right){
                max=sum_left+sum_mid+sum_right;
                res[0]=idx_left;
                res[1]=i;
                res[2]=idx_right;
            }
        }
        return res;
    }
}
