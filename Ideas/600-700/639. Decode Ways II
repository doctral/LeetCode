A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
#####################################################################################################
class Solution {
    public int numDecodings(String s) {
        char[] ss=s.toCharArray();
        if(ss.length==0 || ss[0]=='0') return 0;
        long[] res=new long[ss.length+1];
        res[0]=1;       // start point 
        res[1]=(ss[0]=='*')?9:1;     // the first char
        for(int i=1; i<ss.length; i++){
            // there are three cases: ss[i]=='0', '1'~'9', '*'
            // Case 1: ss[i]=='0'. if ss[i-1]=='1' or '2', then res[i+1]=res[i-1], or ss[i-1]=='*', then there are two possibilities
            // all other would be 0;
            if(ss[i]=='0'){
                if(ss[i-1]=='1' ||ss[i-1]=='2'){
                    res[i+1]=res[i-1];
                }
                else if(ss[i-1]=='*'){
                    res[i+1]=2*res[i-1];
                }
                else {
                    return 0;
                }
            }
            // Case 2: when current char is between '1' and '9', then check previous char
            else if(ss[i]>='1' && ss[i]<='9'){
                res[i+1]=res[i];
                if(ss[i-1]=='1' || (ss[i-1]=='2' && ss[i]<='6')){
                    res[i+1]+=res[i-1];
                }
                else if(ss[i-1]=='*'){
                    res[i+1]+=(ss[i]>'6')?res[i-1]:2*res[i-1];
                }
            }
            // Case 3: when the current char is '*'
            else{
                res[i+1]=9*res[i];
                if(ss[i-1]=='1'){
                    res[i+1]+=9*res[i-1];
                }
                else if(ss[i-1]=='2'){
                    res[i+1]+=6*res[i-1];
                }
                else if(ss[i-1]=='*'){
                    res[i+1]+=15*res[i-1];
                }
            }
            res[i+1]%=(1000000000+7);
        }
        return (int)res[ss.length];
    }
}
