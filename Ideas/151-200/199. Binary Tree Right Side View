Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
#####################################################################################################
Approach 1: using two queue to traversal the tree level by level is trivial.
Approach 2: using recursive method

 The code is as following:
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res=new ArrayList<>();
        dfs(res, root, 0);
        return res;
    }
    private void dfs(List<Integer> res, TreeNode root, int h){
        if(root!=null){
            if(res.size()==h) res.add(root.val);
            dfs(res, root.right, h+1);
            dfs(res, root.left, h+1);
        }
    }
}