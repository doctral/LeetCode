Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
Credits:
Special thanks to @stellari for adding this problem and creating all test cases.
###########################################################################################
Approach 1: get the length of two list, and then start from the same length from end side and compare 
node by node.

Approach 2: the key point is here, for the two lists, we start from the same time. When the shorter 
list reaches the end, we set it to the starting point of longer list and continue. Then when the 
original longer list reaches the end point, we set it to the starting point of the shorter list and continue. Now both lists start from the same length from the end side.

the code is as following:

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null) return null;
        ListNode a=headA, b=headB;
        while(a!=b){
            a=(a==null)?headB:a.next;
            b=(b==null)?headA:b.next;
        }
        return a;
    }
}   
