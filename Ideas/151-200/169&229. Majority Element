Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.
#####################################################################################################
The key point is here, it is > [n/2] times. Therefore, if there are 4 or 5 elements, then the 
majority element must appear more than 2 times, means at least 3 times.
Therefore, we can use moore voting algorithm as following:
class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length; 
        int count=1, major=nums[0];
        for(int i=1; i<n; i++){
            if(nums[i]==major){
                count++;
            }
            else count--;
            if(count==0){
                major=nums[i];
                count++;
            }
        }
        return major;
    }
}

This algorithm works when the majority number always exist. Otherwise, we cannot use this approach.
Think about this, 1,2,3,4,5,5,6,7,7,7 There is no majority element.
######################################################################################################
Follow up: find mojority elements that appear more than [n/3] times. 

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res=new ArrayList<>();
        if(nums.length<1) return res;
        int num1=0, num2=0, ct1=0, ct2=0;
        for(int num: nums){
            if(num==num1){
                ct1++;
            }
            else if(num==num2){
                ct2++;
            }
            else if(ct1==0){
                num1=num;
                ct1=1;
            }
            else if(ct2==0){
                num2=num;
                ct2=1;
            }
            else{
                ct1--;
                ct2--;
            }
        }
        int count1=0, count2=0;
        for(int num: nums){      
            if(num==num1) count1++;
            if(num==num2) count2++;
        }
        if(count1>nums.length/3){       // verify the candidate
            res.add(num1);
        }
        if(num1!=num2 && count2>nums.length/3) res.add(num2);   // verify the candidate
        return res;
    }
}