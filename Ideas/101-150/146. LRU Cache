Design and implement a data structure for Least Recently Used (LRU) cache. It should support the 
following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached 
its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
###################################################################################################
Least Recent Used: each time when an object is used, we set it as head, and when we need to remove 
one object, we simply remove the tail.
Double linked list can remove a node in O(1) if we get the position of the target node, and add a node takes O(1) as well. 
Therefore, we use a hashmap to store the key and its double linked list. 
To implement LRU, we need some assistant methods to operate the double linked list. All are O(1)
    1. void addNode(Node node)    // add this node to head
    2. void removeNode(Node node)  // remove the target node from list
    3. void setHead(Node node){
           removeNode(node);
           addNode(node);
       }
    4. Node removeTail(Node node)  // remove the tail node
To make the operation easier, we create two dummy node: head and tail as the boundaries of the list.      