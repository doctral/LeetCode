Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

#############################################################################################
Again, we use two pointers to find the mid element as the root, and the left part would be the left tree,
and the right part is the right tree.

The code is as following:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        return build(head, null);
    }
    private TreeNode build(ListNode head, ListNode tail){
        if(head==tail) return null;
        ListNode slow=head, fast=head;
        while(fast!=tail && fast.next!=tail){
            fast=fast.next.next;
            slow=slow.next;
        }
        int val=slow.val;
        TreeNode root=new TreeNode(val);
        root.left=build(head, slow);
        root.right=build(slow.next, tail);
        return root;
    }
}