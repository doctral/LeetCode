Given a string S and a string T, count the number of distinct subsequences of S which equals T.

A subsequence of a string is a new string which is formed from the original string by deleting some (
can be none) of the characters without disturbing the relative positions of the remaining characters. 
(ie, "ACE"  a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.

#################################################################################################
This problem can be solved by using DP.
We name a 2-d array res[t.length][s.length].
Than res[0][i] should be 1 for any i; // delete all characters in s to make empty t
Then for res[i][j], when char[t]!=char[s], res[i][j]=res[i][j-1];
when char[t]==char[s], res[i][j]=res[i][j-1]+res[i-1][j-1];
                        