56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
#############################################################################################
The key points here are two steps: 1. sort the intervals based on the start;
                                   2. merge the intervals
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size()<2) return intervals;
        List<Interval> res=new ArrayList<>();
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b){
                return a.start-b.start;
            }
        });
        res.add(intervals.get(0));
        for(int i=1; i<intervals.size(); i++){
            if(res.get(res.size()-1).end>=intervals.get(i).start){
                res.get(res.size()-1).end=Math.max(res.get(res.size()-1).end, intervals.get(i).end);
            }
            else{
                res.add(intervals.get(i));
            }
        }
        return res;
    }
}

#####################################################################################################
57. Insert Interval
Approach 1: The idea is similar, we insert the newInterval into the intervals at first, and then we do the merge using ideas
above. 
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if(newInterval==null) return intervals;
        List<Interval> res=new ArrayList<>();
        if(intervals.size()==0 || newInterval.start>=intervals.get(intervals.size()-1).start){
            intervals.add(newInterval);
        }
        else{
            for(int i=0; i<intervals.size(); i++){
                if(intervals.get(i).start>=newInterval.start){
                    intervals.add(i, newInterval);
                    break;
                }
            }
        }
        res.add(intervals.get(0));
        for(int i=1; i<intervals.size();i++){
            if(res.get(res.size()-1).end>=intervals.get(i).start){
                res.get(res.size()-1).end=Math.max(res.get(res.size()-1).end, intervals.get(i).end);
            }
            else{
                res.add(intervals.get(i));
            }
        }
        return res;
    }
}  

Approach 2: in C# 
/**
 * Definition for an interval.
 * public class Interval {
 *     public int start;
 *     public int end;
 *     public Interval() { start = 0; end = 0; }
 *     public Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {
        IList<Interval> res=new List<Interval>();
        int index=0;
        // add intervals before the newInterval
        while(index<intervals.Count && intervals[index].end<newInterval.start){
            res.Add(intervals[index]);
            index++;
        }
        
        // merge all possible intervals
        while(index<intervals.Count && intervals[index].start <= newInterval.end){
            newInterval=new Interval(
                Math.Min(intervals[index].start, newInterval.start),
                Math.Max(intervals[index].end, newInterval.end)
            );
            index++;
        }
        res.Add(newInterval);
        
        // add intervals greater than newInterval
        while(index<intervals.Count){
            res.Add(intervals[index]);
            index++;
        }
        return res;
    }
}