Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"
click to show corner cases.

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".
#################################################################################################3

One key point here is, when current string == "..", then if our stack is already empty, then it should be skipped. 

public class Solution {
    public String simplifyPath(String path) {
        Set<String> skips=new HashSet<>(Arrays.asList(".","..",""));
        List<String> list=new ArrayList<>();
        for(String str: path.split("/")){
            if(str.equals("..") && list.size()>0){
                list.remove(list.size()-1);
            }
            else if(!skips.contains(str)){
                list.add(str);
            }
        }
        if(list.size()==0) return "/";
        StringBuilder sb=new StringBuilder();
        for(String str: list){
            sb.append("/"+str);
        }
        return sb.toString();
    }
}