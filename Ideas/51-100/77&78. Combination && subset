Combination: 
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
########################################################################################
public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res=new ArrayList<>();
        if(k<=0 || k>n) return res;
        dfs(res, new ArrayList<>(), k, 0, n);
        return res;
    }
    private void dfs(List<List<Integer>> res, List<Integer> temp, int k, int start, int n){
        if(k==0){
            res.add(new ArrayList(temp));
        }
        else{
            for(int i=start; i<n; i++){
                temp.add(i+1);
                dfs(res, temp, k-1, i+1, n);
                temp.remove(temp.size()-1);
            }
        }
    }
}

Subset:
Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
############################################################################################
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        res.add(new ArrayList<>());
        for(int i=1; i<=nums.length; i++){
            dfs(res, new ArrayList<>(), 0, i, nums);
        }
        return res;
    }
    private void dfs(List<List<Integer>> res, List<Integer> temp, int start, int k, int[] nums){
        if(k==0){
            res.add(new ArrayList<>(temp));
        }
        else{
            for(int i=start; i<nums.length; i++){
                temp.add(nums[i]);
                dfs(res, temp, i+1, k-1, nums);
                temp.remove(temp.size()-1);
            }
        }
    }
}