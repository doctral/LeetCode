A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.
#################################################################################################
This problem can be solved by DP, but be very careful about the edge case.
The idea is as following:
Edge case: when the input is empty or there is any leading zero, return 0;
From the second character, check:
     1. if [curr]=='0':
                case 1: [curr-1]=='1' or '2'  // valid
                         subcase 1: curr>=2 // at least three characters  X10 --> X
                                    f[curr]=f[curr-2]
                         subcase 2: else, f[curr]=1;                       10---> 1           
                case 2:  // invalid, return 0
    2. if [curr-1]=='1':
                case 1: if curr>=2, f[curr]=f[curr-1]+f[curr-2]      // X11--> X 1 1 + X 11
                case 2: f[curr]=2                              // 11 --> 2 ways
    3. if [curr-1]=='2' && '0'<[curr]<'7':
                case 1: if curr>=2, f[curr]=f[curr-1]+f[curr-2]
                case 2: else f[curr]=2
    4: all other cases: f[curr]=f[curr-1]      // read one by one                                     