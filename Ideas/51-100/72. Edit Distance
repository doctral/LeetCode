Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
################################################################################################
This problem can be solved using DP. The basic idea is as following:
We use res[i][j] to indicate the number of steps required to convert the first i characters of word1 
to the first j characters of word2.

An insertion operation means: res[i-1][j]+1
A deletion operation means: res[i][j-1]+1
A replacement means: res[i-1][j-1]+1
Each time, we just need to figure out the min of the three candidates.
The base case is empty string. if one is empty, then to convert another string with length len, it
takes len steps, and vice versa.

The code is as following:
public class Solution {
    public int minDistance(String word1, String word2) {
        int n=word1.length(), m=word2.length();
        int[][] res=new int[n+1][m+1];
        for(int i=0; i<=n; i++){
            res[i][0]=i;
        }
        for(int i=0; i<=m; i++){
            res[0][i]=i;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    res[i][j]=res[i-1][j-1];
                }
                else{
                    int min=Math.min(res[i-1][j-1], Math.min(res[i-1][j],res[i][j-1]));
                    res[i][j]=min+1;
                }
            }
        }
        return res[n][m];
    }
}   