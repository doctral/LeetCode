Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.
#############################################################################################
Approach 1: DP (O(n^2) but TLE)
Approach 2: Divide and Conquer. (O(nlogn), but beat 99.8%) 
            The key point is, we find the minIndex at the partial array, when the partial array is 
            sorted, then we can simply go over the array to find the max area from left to right.
            Otherwise, using the minIndex, we divide the partial array recursively by left part and 
            right part, as well as using the nums[minIndex] as the height, from the three parts, find 
            the max area.

The code is as following:

public class Solution {
    public int largestRectangleArea(int[] heights) {
        return findMax(heights, 0, heights.length-1);
    }
    private int findMax(int[] heights, int left, int right){
        if(left>right) return 0;
        if(left==right) return heights[left];
        int minIndex=left;
        boolean sorted=true;
        for(int i=left+1; i<=right; i++){
            if(heights[i]<heights[i-1]){
                sorted=false;
            }
            if(heights[i]<heights[minIndex]) minIndex=i;
        }
        if(sorted){
            int max=0;
            for(int i=left; i<=right; i++){
                int area=heights[i]*(right-i+1);
                if(max<area) max=area;
            }
            return max;
        }
        else{
            int leftMax=findMax(heights, left, minIndex-1);
            int rightMax=findMax(heights, minIndex+1, right);
            int crossMax=heights[minIndex]*(right-left+1);
            return Math.max(Math.max(leftMax, rightMax), crossMax);
        }
    }
}


Approach 3: using a stack in one pass. (O(n), beat 40%) (Need to understand why this way is correct)

The key ideas in this approach is: we traverse all bars from left to right, maintain a stack of bars. Every bar
 is pushed to stack once. A bar is poped from stack when a bar of smaller height is found. When a bar is poped, we calculate
 the area with the popped bar as smallest bar.   

The code is as following:

public class Solution {
    public int largestRectangleArea(int[] heights) {
        if(heights.length<1) return 0;
        Stack<Integer> st=new Stack<>();
        int max=0;
        for(int i=0; i<=heights.length; i++){
            int curr=(i==heights.length)?-1:heights[i];
            while(!st.isEmpty() && curr<heights[st.peek()]){
                int h=heights[st.pop()];
                int w=st.isEmpty()?i:i-st.peek()-1;
                max=Math.max(max,h*w);
            }
            st.push(i);
        }
        return max;
    }
}