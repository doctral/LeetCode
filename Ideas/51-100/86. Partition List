Given a linked list and a value x, partition it such that all nodes less than x come before nodes 
greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

#############################################################################################
Approach 1: swap in place using two pointers

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null || head.next==null) return head;
        ListNode fake=new ListNode(0);
        ListNode pre=fake;
        ListNode curr=fake;
        fake.next=head;
        while(pre.next!=null && pre.next.val<x){ // skip leading small numbers, find the right 
            pre=pre.next;                        // position for the pre pointer
            curr=curr.next;
        }
        while(curr!=null){
            while(curr.next!=null &&curr.next.val>=x) curr=curr.next;  // skip following big numbers
            if(curr.next==null) return fake.next;
            while(curr.next!=null &&curr.next.val<x){      // swap all following small numbers
                ListNode temp=curr.next;
                curr.next=temp.next;
                temp.next=pre.next;
                pre.next=temp;
                pre=temp;
            }
            curr=curr.next;
        }
        return fake.next;
    }
}

Approach 2: create two separate lists, one for smalls, and one for larges, then link two lists together.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null || head.next==null) return head;
        ListNode small=new ListNode(0);
        ListNode copy1=small;
        ListNode big=new ListNode(0);
        ListNode copy2=big;
        while(head!=null){
            if(head.val<x){
                small.next=new ListNode(head.val);
                small=small.next;
            }
            else{
                big.next=new ListNode(head.val);
                big=big.next;
            }
            head=head.next;
        }
        small.next=copy2.next;
        big.next=null;
        return copy1.next;
    }
}