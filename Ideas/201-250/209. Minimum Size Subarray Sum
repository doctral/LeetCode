Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).

################################################################################################
Approach 1: O(n) with two pointers.

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int min=Integer.MAX_VALUE, last=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]>=s) return 1;
            if(i>0){
                nums[i]+=nums[i-1];
                if(nums[i]>=s){
                    while(nums[i]-nums[last]>=s){
                        last++;
                    }
                    if(min>i-last+1) min=i-last+1;
                }
            }
        }
        return min==Integer.MAX_VALUE?0:min;
    }
}

Approach 2: O(nlogn) with binary search

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums.length<1) return 0;
        int[] sums=new int[nums.length+1];
        for(int i=0; i<nums.length; i++){
            if(nums[i]>=s) return 1;
            sums[i+1]=sums[i]+nums[i];
        }
        if(sums[sums.length-1]<s) return 0;
        int min=Integer.MAX_VALUE;
        for(int i=0; i<sums.length; i++){
            int end=search(sums, sums[i]+s, i+1, sums.length-1);
            if(end==sums.length) break;
            if(end-i<min) min=end-i;
        }
        return min;
    }
    private int search(int[] sums, int target, int left, int right){
        while(left<=right){
            int mid=(left+right)/2;
            if(sums[mid]>=target){
                right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return left;
    }
}