Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

For example:

Given "aacecaaa", return "aaacecaaa".

Given "abcd", return "dcbabcd".
#################################################################################################
Approach 1: brute force: from left to right, find the longest palindrome, and then append the reverse string of the remaining substring. 

class Solution {
    public String shortestPalindrome(String s) {
        char[] chs=s.toCharArray();
        int missingIndex=valid(chs);
        if(missingIndex>=chs.length) return s;
        StringBuilder sb=new StringBuilder();
        for(int i=chs.length-1; i>=missingIndex; i--){
            sb.append(chs[i]);
        }
        sb.append(s);
        return sb.toString();
    }
    private int valid(char[] str){
        for(int i=str.length-1; i>=0; i--){
            if(isPalindrome(str, i)) return i+1;
        }
        return 1;
    }
    private boolean isPalindrome(char[] str, int end){
        for(int i=0, j=end; i<j; i++, j--){
            if(str[i]!=str[j]) return false;
        }
        return true;
    }
}   

Approach 2: recursively find the part that definitely not palindrome in the string.

class Solution {
    public String shortestPalindrome(String s) {
        if(s.length()<2) return s;
        int idx=0;
        char[] chs=s.toCharArray();
        for(int i=chs.length-1; i>=0; i--){   // find the remaining part that must not be palindrome
            if(chs[idx]==chs[i]) idx++;
        }
        if(idx==chs.length) return s;
        return reverse(s.substring(idx))+shortestPalindrome(s.substring(0, idx))+s.substring(idx);
    }
    public String reverse(String str){
        char[] ch=str.toCharArray();
        for(int left=0, right=ch.length-1; right>left; left++, right--){
            char t=ch[left];
            ch[left]=ch[right];
            ch[right]=t;
        }
        return new String(ch);
    }
} 