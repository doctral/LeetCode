Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
####################################################################################################################
To handle the parenthesis issue, we need a stack to store the previous value and sign. 

The code is as following:
class Solution {
    public int calculate(String s) {
        int res=0, sign=1, index=0;
        char[] chs=s.toCharArray();
        Stack<Integer> stack=new Stack<>();
        while(index<chs.length){
            char ch=chs[index];
            if(ch=='+'){
                sign=1;
            }
            else if(ch=='-'){
                sign=-1;
            }
            else if(ch=='('){
                stack.push(res);
                stack.push(sign);
                res=0;
                sign=1;
            }
            else if(ch==')'){
                int ss=stack.pop();
                int rr=stack.pop();
                res=rr+ss*res;
            }
            else if(ch-'0'>=0 && ch-'9'<=0){
                int num=ch-'0';
                while(index+1<chs.length && Character.isDigit(chs[index+1])){
                    index++;
                    num=num*10+(chs[index]-'0');
                }
                res+=num*sign;
            }
            index++;
        }
        return res;
    }
}
