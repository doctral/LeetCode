Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
######################################################################################################################
The basic idea is divide and conquer.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null) return 1;
        int sum=0, h=0;      // otherwise, h>=1
        TreeNode curr=root;
        while(curr.left!=null){
            sum+=(1<<h++);
            curr=curr.left;
        }
        //System.out.println(sum);
        return sum+count(root, h);
    }
    private int count(TreeNode root, int h){
        if(h==1){
            if(root.right!=null) return 2;    // left+right
            if(root.left!=null) return 1;     // left only
            return 0;                         // leaf node
        }
        TreeNode right=root.left;
        int curr=1;
        while(curr<h){
            curr++;
            right=right.right;           // since only last level is not complete, left is defined always, but can be both null or leaf node
        }
        if(right!=null) return (1<<(h-1))+count(root.right, h-1);    // if left!=null, then left subtree is full, therefore, we add all leaves in left subtree
        return count(root.left, h-1);
    }
}
