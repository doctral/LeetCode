Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
#####################################################################################
Trie: the root is empty, and all children nodes of a node has the same prefix. 

The implementation is as following:


class Trie {
    class Node{
        boolean word=false;
        Node[] children=new Node[26];
    }

    /** Initialize your data structure here. */
    Node root;
    public Trie() {
        root=new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node curr=root;
        char[] chs=word.toCharArray();
        for(int i=0; i<chs.length; i++){
            int index=chs[i]-'a';
            if(curr.children[index]==null){
                curr.children[index]=new Node();
            }
            curr=curr.children[index];
        }
        curr.word=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node curr=root;
        char[] chs=word.toCharArray();
        for(int i=0; i<chs.length; i++){
            int index=chs[i]-'a';
            if(curr==null || curr.children[index]==null) return false;
            curr=curr.children[index];
        }
        return curr.word;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node curr=root;
        char[] chs=prefix.toCharArray();
        for(int i=0; i<chs.length; i++){
            int index=chs[i]-'a';
            if(curr==null || curr.children[index]==null) return false;
            curr=curr.children[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */