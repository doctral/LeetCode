Given an array of integers, find out whether there are two distinct indices i and j in the array such 
that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference 
between i and j is at most k.
#################################################################################################
Assume the valid number is X, and we want abs(nums[i]-X)<=t. 
There are two cases, if nums[i]-X>=0, then we must have nums[i]-X<=t  ---> X >= nums[i]-t
                     if nums[i]-X<0, then we must have X-nums[i]<=t  ---> X <= t+nums[i]
We let X in the first case be floor, and X in the second case be ceiling, and we use TreeSet.

The code is as following:

class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Long> set=new TreeSet<>();
        int left=0;
        for(int i=0; i<nums.length; i++){
            if(i-left>k) set.remove((long)nums[left++]);
            Long floor=set.floor((long)nums[i]+t);
            Long ceil=set.ceiling((long)nums[i]-t);
            if(floor!=null && floor>=nums[i] || ceil!=null && ceil<=nums[i]) return true;
            set.add((long)nums[i]);
        }
        return false;
    }
} 