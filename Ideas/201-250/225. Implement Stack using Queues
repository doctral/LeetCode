Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
##################################################################################################
The key point is how to implement the push method:
Approach 1: using a single queue, then each time we add a element, we remove all previous items then then add again so the just added element becomes the first out element.

Approach 2: using two queues: each time we add a new element to an empty queue, and then we add all elements from the other queue, so that in any time we have am empty queue and the lastest element would be the first out element.