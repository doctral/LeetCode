There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
click to show more hints.

Hints:
This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.
Topological sort could also be done via BFS.

################################################################################################
There are two general approaches:
1. BFS+topological sort
The code is as following:

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> map=new HashMap<>();
        int[] indegree=new int[numCourses];
        for(int i=0; i<prerequisites.length; i++){
            int pre=prerequisites[i][1];
            int course=prerequisites[i][0];
            indegree[course]++;
            if(map.containsKey(pre)){
                map.get(pre).add(course);
            }
            else{
                List<Integer> list=new ArrayList<>();
                list.add(course);
                map.put(pre, list);
            }
        }
        Queue<Integer> curr=new LinkedList<>();
        for(int i=0; i<indegree.length; i++){
            if(indegree[i]==0) curr.add(i);
        }
        int count=0;
        while(curr.size()>0){
            int pre=curr.remove();
            count++;
            if(!map.containsKey(pre)) continue;
            for(int course: map.get(pre)){
                if(--indegree[course]==0) curr.add(course);
            }
        }
        return count==numCourses;
    }
}

2. check DAG using union-find (beat 99.7%):
 
 class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] pa=new int[numCourses];
        for(int i=0; i<numCourses; i++) pa[i]=i;
        for(int i=0; i<prerequisites.length; i++){
            int cour=prerequisites[i][0];
            int pre=prerequisites[i][1];
            if(cour==pre) return false;
            pa[cour]=pre;
            while(pa[pre]!=pre){
                if(pre==cour) return false;
                pre=pa[pre];
            }
        }
        return true;
    }
}