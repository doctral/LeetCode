public class Solution {
    public void SolveSudoku(char[,] board) {
        solve(board);
    }
    
    private bool solve(char[,] board){
        for(int i=0; i<board.GetLength(0); i++){
            for(int j=0; j<board.GetLength(1); j++){
                if(board[i,j]=='.'){
                    for(char ch='1'; ch<='9'; ch++){
                        if(valid(board, i, j, ch)){
                            board[i,j]=ch;
                            // solve recursively 
                            if(solve(board)){
                                return true;
                            }
                            // if failed, backtracking
                            board[i,j]='.';
                        }
                    }
                    // no solution for current [i,j], so return false and go back
                    return false;
                }
            }
        }
        return true;
    }
    
    private bool valid(char[,] board, int row, int col, char ch){
        for(int i=0; i<9; i++){
            if(board[row, i]!='.' && board[row, i]==ch) return false;
            if(board[i,col]!='.' && board[i,col]==ch) return false;
        }
        int r=(row/3)*3,c=(col/3)*3;
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                if(board[r+i,c+j]!='.' && board[r+i,j+c]==ch){
                    return false;
                }
            }
        }
        return true;
    }
}