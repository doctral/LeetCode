Selection Sort:
    Algorithm: find the smallest number in the array and swap it with the first num in the array.
               Repeat this step until only a number remains.
               
Insertion Sort:
    Algorithm: repeatedly inserting a new element into a sorted sublist until the whole array is sorted.

Bubble Sort:
    Algorithm: on each pass, sucessive neighboring pairs are compared. If a pair is in decreasing order, its values are swapped. 

Merge Sort:
    Algorithm: divides the array into two halves and applies a merge sort on each half recursively. After the two halves are sorted,
    then merge them. 

Quick Sort:
    Algorithm: The algorithm selects an element, called the pivot, in the array. It divides the array into two parts, so that
    all the elements in the first part are less than or equal to the pivot and all the elements in the second part are greater
    than the pivot. The quick sort algorithm is then recursively applied to the first part and then the second part.

Heap Sort: a heap sort uses a binary heap, it first adds all the elements to a heap and then removes the largest elements 
    successively to obtain a sorted list.
    Heap is complete binary tree, which can be implemented by an arraylist. 
    For a node at index i, its left child is at position 2i+1, the right child is at 2i+2
                           its parent node is at (i-1)/2
    
    Add a new node: first add it to the end of the heap, and then rebuild the tree as follows:
           Let the last node be the current node;
           while (the current node > its parent){
               swap the current node with its parent
               Now the current node is one level up;
           }
    
    Remove the root: After the root is removed, the tree must be rebuilt to maintain the heap property. The algorithm for rebuilding the 
    tree can be described as follows:
          move the last node to replace the root.
          Let the root be the current node
          while (the current node has children and the current node is smaller than one of its children){
               swap the current node with the larger of its children
               now the current node is one level down
          }
    
               
